#!/usr/bin/env python3
"""
Setup script for WordPress API Manager
This script helps with initial setup and configuration
"""

import os
import sys
import subprocess
import secrets
from pathlib import Path

def check_python_version():
    """Check if Python version is 3.7 or higher"""
    if sys.version_info < (3, 7):
        print("❌ Error: Python 3.7 or higher is required.")
        print(f"   Current version: {sys.version}")
        sys.exit(1)
    print(f"✅ Python version: {sys.version.split()[0]}")

def create_directories():
    """Create necessary directories"""
    directories = ['uploads', 'instance', 'logs']
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"✅ Created directory: {directory}/")

def install_dependencies():
    """Install Python dependencies"""
    print("\n📦 Installing dependencies...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("✅ Dependencies installed successfully!")
    except subprocess.CalledProcessError as e:
        print(f"❌ Error installing dependencies: {e}")
        print("   Try running: pip install -r requirements.txt manually")
        return False
    return True

def create_env_file():
    """Create .env file with secure defaults"""
    env_path = Path('.env')
    if env_path.exists():
        response = input("\n⚠️  .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("   Keeping existing .env file")
            return
    
    # Generate a secure secret key
    secret_key = secrets.token_hex(32)
    
    env_content = f"""# WordPress API Manager - Environment Configuration
# Generated by setup.py

# Flask Configuration
SECRET_KEY={secret_key}
FLASK_ENV=development
FLASK_DEBUG=True

# Database Configuration
DATABASE_URL=sqlite:///wordpress_manager.db

# Server Configuration
HOST=0.0.0.0
PORT=5000

# Session Configuration
SESSION_TYPE=filesystem
PERMANENT_SESSION_LIFETIME=604800  # 7 days in seconds

# Security Settings (for production)
# WTF_CSRF_ENABLED=True
# SESSION_COOKIE_SECURE=True
# SESSION_COOKIE_HTTPONLY=True
# SESSION_COOKIE_SAMESITE=Lax

# Optional: External API Keys (for future enhancements)
# OPENAI_API_KEY=your-openai-api-key
# GOOGLE_ANALYTICS_ID=your-ga-id
"""
    
    with open(env_path, 'w') as f:
        f.write(env_content)
    
    print(f"✅ Created .env file with secure configuration")
    print(f"   Secret key generated: {secret_key[:20]}...")

def initialize_database():
    """Initialize the database"""
    print("\n🗄️  Initializing database...")
    try:
        from app import app, db
        with app.app_context():
            db.create_all()
            print("✅ Database initialized successfully!")
            print("   Database location: wordpress_manager.db")
    except Exception as e:
        print(f"❌ Error initializing database: {e}")
        print("   Try running: python init_db.py")
        return False
    return True

def create_sample_data():
    """Optionally create sample data"""
    response = input("\n📝 Would you like to create a sample admin account? (y/N): ")
    if response.lower() != 'y':
        return
    
    try:
        from app import app, db, User
        
        with app.app_context():
            # Check if admin already exists
            admin = User.query.filter_by(username='admin').first()
            if admin:
                print("   Admin account already exists")
                return
            
            # Create admin user
            admin = User(
                username='admin',
                email='admin@example.com'
            )
            admin.set_password('admin123')  # Change this!
            
            db.session.add(admin)
            db.session.commit()
            
            print("✅ Created sample admin account:")
            print("   Username: admin")
            print("   Email: admin@example.com")
            print("   Password: admin123")
            print("   ⚠️  IMPORTANT: Change this password after first login!")
            
    except Exception as e:
        print(f"❌ Error creating sample data: {e}")

def print_next_steps():
    """Print next steps for the user"""
    print("\n" + "=" * 60)
    print("🎉 Setup Complete!")
    print("=" * 60)
    print("\n📋 Next Steps:")
    print("1. Review and update .env file with your configuration")
    print("2. Run the application: python run.py")
    print("3. Access the application at: http://localhost:5000")
    print("4. Create an account or login with sample credentials")
    print("\n📚 Configuration Guide:")
    print("• To add WordPress sites: Login → Manage Websites")
    print("• To setup Google Indexing: API Settings → Add Service Account Key")
    print("• For production: Update .env with production settings")
    print("\n💡 Tips:")
    print("• Use strong passwords for all accounts")
    print("• Keep your WordPress API keys secure")
    print("• Regularly backup your database file")
    print("=" * 60)

def main():
    """Main setup process"""
    print("=" * 60)
    print("🚀 WordPress API Manager - Setup Script")
    print("=" * 60)
    
    # Check Python version
    check_python_version()
    
    # Create necessary directories
    print("\n📁 Creating directories...")
    create_directories()
    
    # Install dependencies
    if not install_dependencies():
        print("\n⚠️  Setup incomplete. Please install dependencies manually.")
        return
    
    # Create .env file
    create_env_file()
    
    # Initialize database
    if not initialize_database():
        print("\n⚠️  Setup incomplete. Please initialize database manually.")
        return
    
    # Optionally create sample data
    create_sample_data()
    
    # Print next steps
    print_next_steps()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n⚠️  Setup interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Unexpected error: {e}")
        sys.exit(1)